/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package si.rso.bicycle.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserCreated extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6512690607487472628L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserCreated\",\"namespace\":\"si.rso.bicycle.schemas\",\"fields\":[{\"name\":\"uid\",\"type\":\"string\"},{\"name\":\"username\",\"type\":\"string\"},{\"name\":\"created_at\",\"type\":{\"type\":\"string\",\"logicalType\":\"timestamp-micros\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserCreated> ENCODER =
      new BinaryMessageEncoder<UserCreated>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserCreated> DECODER =
      new BinaryMessageDecoder<UserCreated>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<UserCreated> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<UserCreated> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserCreated>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this UserCreated to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a UserCreated from a ByteBuffer. */
  public static UserCreated fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence uid;
  @Deprecated public java.lang.CharSequence username;
  @Deprecated public java.lang.CharSequence created_at;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserCreated() {}

  /**
   * All-args constructor.
   * @param uid The new value for uid
   * @param username The new value for username
   * @param created_at The new value for created_at
   */
  public UserCreated(java.lang.CharSequence uid, java.lang.CharSequence username, java.lang.CharSequence created_at) {
    this.uid = uid;
    this.username = username;
    this.created_at = created_at;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return uid;
    case 1: return username;
    case 2: return created_at;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: uid = (java.lang.CharSequence)value$; break;
    case 1: username = (java.lang.CharSequence)value$; break;
    case 2: created_at = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'uid' field.
   * @return The value of the 'uid' field.
   */
  public java.lang.CharSequence getUid() {
    return uid;
  }

  /**
   * Sets the value of the 'uid' field.
   * @param value the value to set.
   */
  public void setUid(java.lang.CharSequence value) {
    this.uid = value;
  }

  /**
   * Gets the value of the 'username' field.
   * @return The value of the 'username' field.
   */
  public java.lang.CharSequence getUsername() {
    return username;
  }

  /**
   * Sets the value of the 'username' field.
   * @param value the value to set.
   */
  public void setUsername(java.lang.CharSequence value) {
    this.username = value;
  }

  /**
   * Gets the value of the 'created_at' field.
   * @return The value of the 'created_at' field.
   */
  public java.lang.CharSequence getCreatedAt() {
    return created_at;
  }

  /**
   * Sets the value of the 'created_at' field.
   * @param value the value to set.
   */
  public void setCreatedAt(java.lang.CharSequence value) {
    this.created_at = value;
  }

  /**
   * Creates a new UserCreated RecordBuilder.
   * @return A new UserCreated RecordBuilder
   */
  public static si.rso.bicycle.schemas.UserCreated.Builder newBuilder() {
    return new si.rso.bicycle.schemas.UserCreated.Builder();
  }

  /**
   * Creates a new UserCreated RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserCreated RecordBuilder
   */
  public static si.rso.bicycle.schemas.UserCreated.Builder newBuilder(si.rso.bicycle.schemas.UserCreated.Builder other) {
    return new si.rso.bicycle.schemas.UserCreated.Builder(other);
  }

  /**
   * Creates a new UserCreated RecordBuilder by copying an existing UserCreated instance.
   * @param other The existing instance to copy.
   * @return A new UserCreated RecordBuilder
   */
  public static si.rso.bicycle.schemas.UserCreated.Builder newBuilder(si.rso.bicycle.schemas.UserCreated other) {
    return new si.rso.bicycle.schemas.UserCreated.Builder(other);
  }

  /**
   * RecordBuilder for UserCreated instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserCreated>
    implements org.apache.avro.data.RecordBuilder<UserCreated> {

    private java.lang.CharSequence uid;
    private java.lang.CharSequence username;
    private java.lang.CharSequence created_at;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(si.rso.bicycle.schemas.UserCreated.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.uid)) {
        this.uid = data().deepCopy(fields()[0].schema(), other.uid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.created_at)) {
        this.created_at = data().deepCopy(fields()[2].schema(), other.created_at);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UserCreated instance
     * @param other The existing instance to copy.
     */
    private Builder(si.rso.bicycle.schemas.UserCreated other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.uid)) {
        this.uid = data().deepCopy(fields()[0].schema(), other.uid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.username)) {
        this.username = data().deepCopy(fields()[1].schema(), other.username);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.created_at)) {
        this.created_at = data().deepCopy(fields()[2].schema(), other.created_at);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'uid' field.
      * @return The value.
      */
    public java.lang.CharSequence getUid() {
      return uid;
    }

    /**
      * Sets the value of the 'uid' field.
      * @param value The value of 'uid'.
      * @return This builder.
      */
    public si.rso.bicycle.schemas.UserCreated.Builder setUid(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.uid = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'uid' field has been set.
      * @return True if the 'uid' field has been set, false otherwise.
      */
    public boolean hasUid() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'uid' field.
      * @return This builder.
      */
    public si.rso.bicycle.schemas.UserCreated.Builder clearUid() {
      uid = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'username' field.
      * @return The value.
      */
    public java.lang.CharSequence getUsername() {
      return username;
    }

    /**
      * Sets the value of the 'username' field.
      * @param value The value of 'username'.
      * @return This builder.
      */
    public si.rso.bicycle.schemas.UserCreated.Builder setUsername(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.username = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'username' field has been set.
      * @return True if the 'username' field has been set, false otherwise.
      */
    public boolean hasUsername() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'username' field.
      * @return This builder.
      */
    public si.rso.bicycle.schemas.UserCreated.Builder clearUsername() {
      username = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'created_at' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreatedAt() {
      return created_at;
    }

    /**
      * Sets the value of the 'created_at' field.
      * @param value The value of 'created_at'.
      * @return This builder.
      */
    public si.rso.bicycle.schemas.UserCreated.Builder setCreatedAt(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.created_at = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'created_at' field has been set.
      * @return True if the 'created_at' field has been set, false otherwise.
      */
    public boolean hasCreatedAt() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'created_at' field.
      * @return This builder.
      */
    public si.rso.bicycle.schemas.UserCreated.Builder clearCreatedAt() {
      created_at = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserCreated build() {
      try {
        UserCreated record = new UserCreated();
        record.uid = fieldSetFlags()[0] ? this.uid : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.username = fieldSetFlags()[1] ? this.username : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.created_at = fieldSetFlags()[2] ? this.created_at : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserCreated>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserCreated>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserCreated>
    READER$ = (org.apache.avro.io.DatumReader<UserCreated>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
